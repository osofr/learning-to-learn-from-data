## ---------------------------------------------------------------------------------------
## Classes that define an object for parmetric models.
## This includes the number of parameters in the model, the bounds of the parameter space,
## the definition of the true parameter (target of estimation) and functionality for
## simulating data from a given parametric model.
## ---------------------------------------------------------------------------------------

using MacroTools: @forward

## ---------------------------------------------------------------------------------------
## Def bounds on the parameter space
## ---------------------------------------------------------------------------------------
struct ParamBox{T}
    bounds::Vector{T}
end

@forward ParamBox.bounds Base.getindex, Base.first, Base.last, Base.endof, Base.push!, Base.length
@forward ParamBox.bounds Base.start, Base.next, Base.done

bounds(Œ≥::ParamBox, idx::Vector) = map((vec, idx) -> vec[idx], Œ≥, idx)
bounds(Œ≥::ParamBox, idx::Int) = bounds(Œ≥, fill(idx, length(Œ≥)))
lb(Œ≥::ParamBox) = bounds(Œ≥,1)
ub(Œ≥::ParamBox) = bounds(Œ≥,2)
mid(Œ≥::ParamBox) = (lb(Œ≥) + ub(Œ≥)) / 2
border(Œ≥::ParamBox) = [lb(Œ≥),
                       ub(Œ≥),
                       mid(Œ≥),
                       bounds(Œ≥, rand([1,2], 3)),
                       bounds(Œ≥, rand([1,2], 3)),
                       bounds(Œ≥, rand([1,2], 3)),
                       bounds(Œ≥, rand([1,2], 3))
                       ]

## parameter space transformations
import Base.linspace
linspace(Œ≥::ParamBox;step=0.01) = map(x -> x[1]:eltype(Œ≥[1])(step):x[2], Œ≥.bounds)
lintrans(x, lb, ub) = x*(ub-lb)+lb

import Base.rand
function rand(Œ≥::ParamBox, nvals; step=0.01)
    range = linspace(Œ≥,step=step)
    x = map(x -> rand(x,nvals), range)
    x = hcat(x...)
    return [x[i,:] for i=1:nvals]
end

## ---------------------------------------------------------------------------------------
## Def model / parameter
## ---------------------------------------------------------------------------------------
abstract type ModelP·µè end
abstract type NonParamModelP·µè <: ModelP·µè end
# abstract type ParamModelP·µè <: NonParamModelP·µè end

struct ParamModelP·µè{T} <: ModelP·µè
    bounds::ParamBox{T}
    Œ®::Symbol           # symbol for function name that evalutes the truth (under same name)
    name::Symbol        # name of the data-gen fun for simulating ùêó
    xdim::Int           # dimension of input data ùêó ‚Ü¶ T(ùêó), for sample ùêó=(X·µ¢:i=1,‚Ä¶,n)
end
@forward ParamModelP·µè.bounds bounds, lb, ub, mid, border, linspace, rand
@forward ParamModelP·µè.bounds Base.getindex, Base.first, Base.last, Base.endof, Base.push!, Base.length
@forward ParamModelP·µè.bounds Base.start, Base.next, Base.done

## define constructor that ensures type consistency (convert each bound to same types as params)
function ParamModelP·µè(bounds::ParamBox{T}; Œ®::Symbol=Œ®Œº,name::Symbol=:norm,xdim::Int=10) where T
    ParamModelP·µè(bounds,Œ®,name,xdim)
end

## clip parameter vector to stay within the bounds, by ref
## only works when Œ≥ is a single parameter value (not a vector of params)
function clip!(Œ≥, modelP::ParamModelP·µè)
   Œ≥ .= min.(ub(modelP), max.(lb(modelP), Œ≥))
   return Œ≥
end
## re-allocate Œ≥ (use for autodiff or GPU)
function clip(Œ≥, modelP::ParamModelP·µè)
   Œ≥ = min.(ub(modelP), max.(lb(modelP), Œ≥))
   return Œ≥
end

function allocX1n(modelP::ParamModelP·µè, nbatch::Int; atype=Array{Float32})
    convert(atype, randn(Float32, modelP.xdim, nbatch))
end
